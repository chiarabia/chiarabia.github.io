{"version":3,"sources":["webpack:///./src/components/bio.tsx","webpack:///./src/pages/index.tsx"],"names":["Bio","useStaticQuery","site","siteMetadata","author","BlogIndex","props","data","siteTitle","title","allMarkdownRemark","edges","location","keywords"],"mappings":"uIAUaA,EAAM,WACJC,yBAAe,cAiBJC,KAAKC,aAArBC,OAER,OACE,oCACE,mCACA,qDACA,qDACA,qDACA,uD,wBCkCSC,UA7DG,SAACC,GACjB,IAAMC,EAAON,yBAAe,aAyBtBO,EAAYD,EAAKL,KAAKC,aAAaM,MAC3BF,EAAKG,kBAAkBC,MAErC,OACE,kBAAC,IAAD,CAAQC,SAAUN,EAAMM,SAAUH,MAAOD,GACvC,kBAAC,IAAD,CACEC,MAAM,YACNI,SAAU,CAAC,OAAD,iCAEZ,kBAAC,EAAD","file":"component---src-pages-index-tsx-e0ce233e91b0bd094bfc.js","sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's StaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/static-query/\n */\n\nimport { graphql, useStaticQuery } from \"gatsby\"\nimport React from \"react\"\n\nexport const Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      avatar: file(absolutePath: { regex: \"/profile-pic.jpg/\" }) {\n        childImageSharp {\n          fixed(width: 50, height: 50) {\n            ...GatsbyImageSharpFixed\n          }\n        }\n      }\n      site {\n        siteMetadata {\n          author\n        }\n      }\n    }\n  `)\n\n  const { author } = data.site.siteMetadata\n\n  return (\n    <>\n      <h1>Bio</h1>\n      <p>Hello this is the bio.</p>\n      <p>Hello this is the bio.</p>\n      <p>Hello this is the bio.</p>\n      <p>Hello this is the bio.</p>\n    </>\n  )\n}\n","import { graphql, Link, PageRendererProps, useStaticQuery } from \"gatsby\"\nimport React from \"react\"\nimport { Bio } from \"../components/bio\"\nimport { Layout } from \"../components/layout\"\nimport { SEO } from \"../components/seo\"\nimport { MarkdownRemark } from \"../graphql-types\"\n\ntype Props = PageRendererProps\n\nconst BlogIndex = (props: Props) => {\n  const data = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n      allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n        edges {\n          node {\n            excerpt\n            fields {\n              slug\n            }\n            frontmatter {\n              date(formatString: \"MMMM DD, YYYY\")\n              title\n              description\n            }\n          }\n        }\n      }\n    }\n  `)\n\n  const siteTitle = data.site.siteMetadata.title\n  const posts = data.allMarkdownRemark.edges\n\n  return (\n    <Layout location={props.location} title={siteTitle}>\n      <SEO\n        title=\"All posts\"\n        keywords={[`blog`, `gatsby`, `javascript`, `react`]}\n      />\n      <Bio />\n      {/* {posts.map(({ node }: { node: MarkdownRemark }) => {\n        const frontmatter = node!.frontmatter!\n        const fields = node!.fields!\n        const slug = fields.slug!\n        const excerpt = node!.excerpt!\n\n        const title = frontmatter.title || fields.slug\n        return (\n          <div key={slug}>\n            <h2>\n              <Link to={slug}>{title}</Link>\n            </h2>\n            <small>{frontmatter.date}</small>\n            <p\n              dangerouslySetInnerHTML={{\n                __html: frontmatter.description || excerpt,\n              }}\n            />\n          </div>\n        )\n      })} */}\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n"],"sourceRoot":""}